//INIT GOOGLE MAP
function initQubelyGoogleMap($mapItem) {
    let styles = '';
    try {
        styles = JSON.parse($mapItem.attr('data-styles'));
    } catch (e) { }
    const mapOptions = {
        zoom: parseInt($mapItem.attr('data-zoom'), 10),
        zoomControl: 'true' === $mapItem.attr('data-show-zoom-buttons'),
        zoomControlOpt: {
            style: 'DEFAULT',
            position: 'RIGHT_BOTTOM',
        },
        mapTypeControl: 'true' === $mapItem.attr('data-show-map-type-buttons'),
        streetViewControl: 'true' === $mapItem.attr('data-show-street-view-button'),
        fullscreenControl: 'true' === $mapItem.attr('data-show-fullscreen-button'),
        draggable: 'true' === $mapItem.attr('data-option-draggable'),
        styles: styles,
    }
    const map = new google.maps.Map($mapItem[0], mapOptions);
    var request = {
        placeId: $mapItem.attr('data-placeID'),
        fields: ['place_id', 'geometry', 'name', 'formatted_address', 'adr_address', 'website']
    };

    const service = new google.maps.places.PlacesService(map);
    service.getDetails(request, (place, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
            }
            let markerOption = { map: map }
            const iconPointer = $mapItem.attr('data-icon-pointer');
            if (iconPointer) markerOption.icon = iconPointer;
            const marker = new google.maps.Marker(markerOption);
            // Set the position of the marker using the place ID and location.
            marker.setPlace({
                placeId: place.place_id,
                location: place.geometry.location
            });
            ('true' === $mapItem.attr('data-show-marker')) ? marker.setVisible(true) : marker.setVisible(false);

            const contentString = '<div class="qubely-gmap-marker-window"><div class="qubely-gmap-marker-place">' + place.name + '</div><div class="qubely-gmap-marker-address">' +
                place.adr_address + '</div>' +
                '<div class="qubely-gmap-marker-url"><a href="' + place.website + '" target="_blank">' + place.website + '</a></div></div>';

            const infowindow = new google.maps.InfoWindow({
                content: contentString
            });
            marker.addListener('click', () => {
                infowindow.open(map, marker);
            });
        }
    });
}


//CONTACT FORM BLOCK
$('.qubely-block-contact-form form.qubely-form:not(.qubely-form-ready)').each(function () {
    const $form = $(this);
    $form.addClass('qubely-form-ready');
    $form.find('input.qubely-form-control').on('keydown', (e) => {
        if (e.which === 13) { e.preventDefault(); return false; };
    });
    checkFormValidation($form, true); //add validation

    //FORM SUBMIT EVENT
    $form.submit((e) => {
        e.preventDefault();
        let formData = $form.serializeArray();
        const isRequired = checkFormValidation($form); //check validation
        if (!isRequired) {
            formData.push({ name: 'captcha', value: (typeof grecaptcha !== "undefined") ? grecaptcha.getResponse() : undefined });
            jQuery.ajax({
                url: qubely_urls.ajax + '?action=qubely_send_form_data',
                type: "POST",
                data: formData,
                beforeSend: () => {
                    $form.find('button[type="submit"]').addClass('disable').attr('disabled', true);
                    $form.find(".qubely-form-message").html('<div class="qubely-alert qubely-alert-info">Message sending...</div>');
                },
                success: (response) => {
                    $form.find('button[type="submit"]').removeClass('disable').attr('disabled', false);
                    $form.find(".qubely-form-message").html(`<div class="qubely-alert qubely-alert-success">${response.data.msg}</div>`);
                    setTimeout(() => $form.find('.qubely-form-message').html(''), 4000);
                    if (response.data.status == 1) $form.trigger("reset");
                },
                error: (jqxhr, textStatus, error) => {
                    $form.find('button[type="submit"]').removeClass('disable').attr('disabled', false);
                    $form.find(".qubely-form-message").html(`<div class="qubely-alert qubely-alert-danger">${textStatus} : ${error} - ${jqxhr.responseJSON}</div>`);
                }
            });
        }
    });
});